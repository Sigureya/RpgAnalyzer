{"version":3,"file":"rpg-analyzer.es.js","sources":["../node_modules/@sigureya/rpgtypes/dist/rpgtypes.es.js","../node_modules/@sigureya/rpg-data-tools/dist/rpg-data-tools.es.js","../src/extract/audio/eventCommand/fromCommand.ts","../src/extract/audio/correctCommands.ts","../src/extract/audio/system/system.ts","../src/extract/text/mainData/mainData.ts","../src/extract/text/eventCommand/getTextFromCommand.ts","../src/extract/text/events.ts","../src/extract/image/mainData/mainData.ts","../src/extract/image/system/system.ts","../src/extract/image/map/eventCommand/fromEventCommands.ts","../src/extract/image/map/collectCommand.ts","../src/extract/variable/eventCommand/read/piravate/privateConstants.ts","../src/extract/variable/eventCommand/read/readVariabler.ts","../src/extract/variable/eventCommand/write/writeVariable.ts","../src/extract/variable/correct.ts","../src/extract/eventCall/eventCall.ts"],"sourcesContent":["const E = 0, _ = 1, O = 2, s = 3, t = 32, T = 48, c = 0, R = 101, n = 401, o = 102, A = 402, N = 103, C = 104, S = 105, I = 405, L = 108, M = 408, U = 109, G = 111, H = 411, P = 112, F = 113, D = 115, B = 117, V = 118, W = 119, Y = 121, e = 122, a = 123, K = 124, l = 125, X = 126, b = 127, i = 128, r = 129, m = 132, p = 133, g = 134, k = 135, v = 136, x = 137, J = 138, f = 139, h = 140, u = 201, y = 202, Q = 203, Z = 204, d = 205, j = 206, q = 211, w = 212, z = 213, $ = 214, EE = 216, _E = 217, OE = 221, sE = 222, tE = 223, TE = 224, cE = 225, RE = 230, nE = 231, oE = 232, AE = 233, NE = 234, CE = 235, SE = 236, IE = 241, LE = 242, ME = 243, UE = 244, GE = 245, HE = 246, PE = 249, FE = 250, DE = 251, BE = 261, VE = 282, WE = 283, YE = 284, eE = 285, aE = 301, KE = 302, lE = 605, XE = 303, bE = 311, iE = 312, rE = 313, mE = 314, pE = 315, gE = 320, kE = 321, vE = 322, xE = 323, JE = 324, fE = 325, hE = 331, uE = 332, yE = 333, QE = 334, ZE = 335, dE = 336, jE = 337, qE = 339, wE = 340, zE = 351, $E = 342, E_ = 352, __ = 353, O_ = 354, s_ = 355, t_ = 655, T_ = 356, c_ = 357, R_ = 0, n_ = 1, o_ = 2, A_ = 3, N_ = 4, C_ = 5, S_ = 6, I_ = 7, L_ = 8, M_ = 9, U_ = 10, G_ = 11, H_ = 12, P_ = 13, F_ = 14, D_ = 15, B_ = 16, V_ = 17, W_ = 18, Y_ = 19, e_ = 20, a_ = 21, K_ = 22, l_ = 23, X_ = 24, b_ = 25, i_ = 26, r_ = 27, m_ = 28, p_ = 29, g_ = 30, k_ = 31, v_ = 32, x_ = 33, J_ = 34, f_ = 35, h_ = 36, u_ = 37, y_ = 38, Q_ = 39, Z_ = 40, d_ = 41, j_ = 42, q_ = 43, w_ = 44, z_ = 45, $_ = \"bgm\", EO = \"se\", _O = \"me\", OO = \"bgs\", sO = \"battlebacks1\", tO = \"battlebacks2\", TO = \"characters\", cO = \"enemies\", RO = \"faces\", nO = \"parallaxes\", oO = \"pictures\", AO = \"sv_actors\", NO = \"sv_enemies\", CO = \"system\", SO = \"tilesets\", IO = \"titles1\", LO = \"titles2\";\nexport {\n  wE as ABORT_BATTLE,\n  aE as BATTLE_PROCESSING,\n  vE as CHANGE_ACTOR_IMAGES,\n  i as CHANGE_ARMORS,\n  WE as CHANGE_BATTLE_BACKGROUND,\n  m as CHANGE_BATTLE_BGM,\n  kE as CHANGE_CLASS,\n  f as CHANGE_DEFEAT_ME,\n  v as CHANGE_ENCOUNTER,\n  hE as CHANGE_ENEMY_HP,\n  uE as CHANGE_ENEMY_MP,\n  yE as CHANGE_ENEMY_STATE,\n  $E as CHANGE_ENEMY_TP,\n  pE as CHANGE_EXP,\n  x as CHANGE_FORMATION_ACCESS,\n  l as CHANGE_GOLD,\n  bE as CHANGE_HP,\n  X as CHANGE_ITEMS,\n  k as CHANGE_MENU_ACCESS,\n  iE as CHANGE_MP,\n  gE as CHANGE_NAME,\n  JE as CHANGE_NICKNAME,\n  YE as CHANGE_PARALLAX,\n  r as CHANGE_PARTY_MEMBER,\n  EE as CHANGE_PLAYER_FOLLOWERS,\n  fE as CHANGE_PROFILE,\n  g as CHANGE_SAVE_ACCESS,\n  VE as CHANGE_TILESET,\n  rE as CHANGE_TP,\n  q as CHANGE_TRANSPARENCY,\n  h as CHANGE_VEHICLE_BGM,\n  xE as CHANGE_VEHICLE_IMAGE,\n  p as CHANGE_VICTORY_ME,\n  b as CHANGE_WEAPONS,\n  J as CHANGE_WINDOW_COLOR,\n  L as COMMENT,\n  M as COMMENT_BODY,\n  B as COMMON_EVENT,\n  G as CONDITIONAL_BRANCH,\n  H as CONDITIONAL_BRANCH_ELSE,\n  a as CONTROL_SELF_SWITCH,\n  Y as CONTROL_SWITCHES,\n  K as CONTROL_TIMER,\n  e as CONTROL_VARIABLES,\n  ZE as ENEMY_APPEAR,\n  QE as ENEMY_RECOVER_ALL,\n  dE as ENEMY_TRANSFORM,\n  $ as ERASE_EVENT,\n  CE as ERASE_PICTURE,\n  D as EXIT_EVENT_PROCESSING,\n  sE as FADEIN_SCREEN,\n  LE as FADEOUT_BGM,\n  HE as FADEOUT_BGS,\n  OE as FADEOUT_SCREEN,\n  E as FLAG_ID_AUTO_BATTLE,\n  _ as FLAG_ID_GUARD,\n  s as FLAG_ID_PRESERVE_TP,\n  O as FLAG_ID_SUBSTITUTE,\n  TE as FLASH_SCREEN,\n  $_ as FOLDER_AUDIO_BGM,\n  OO as FOLDER_AUDIO_BGS,\n  _O as FOLDER_AUDIO_ME,\n  EO as FOLDER_AUDIO_SE,\n  sO as FOLDER_IMG_BATTLEBACK1,\n  tO as FOLDER_IMG_BATTLEBACK2,\n  TO as FOLDER_IMG_CHACTERS,\n  cO as FOLDER_IMG_ENEMIES,\n  RO as FOLDER_IMG_FACES,\n  nO as FOLDER_IMG_PARALLACES,\n  oO as FOLDER_IMG_PICTURES,\n  AO as FOLDER_IMG_SV_ACTORS,\n  NO as FOLDER_IMG_SV_ENEMIES,\n  CO as FOLDER_IMG_SYSTEM,\n  SO as FOLDER_IMG_TILESETS,\n  IO as FOLDER_IMG_TITLES1,\n  LO as FOLDER_IMG_TITLES2,\n  qE as FORCE_ACTION,\n  __ as GAME_OVER,\n  _E as GATHER_FOLLOWERS,\n  eE as GET_LOCATION_INFO,\n  j as GET_ONOFF_VEHICLE,\n  t as ICON_BUFF_START,\n  T as ICON_DEBUFF_START,\n  N as INPUT_NUMBER,\n  V as LABEL,\n  W as LABEL_JUMP,\n  P as LOOP,\n  F as LOOP_BREAK,\n  oE as MOVE_PICTURE,\n  XE as NAME_INPUT_PROCESSING,\n  c as NO_OPERATION,\n  zE as OPEN_MENU_SCREEN,\n  E_ as OPEN_SAVE_SCREEN,\n  IE as PLAY_BGM,\n  GE as PLAY_BGS,\n  PE as PLAY_ME,\n  BE as PLAY_MOVIE,\n  FE as PLAY_SE,\n  T_ as PLUGIN_COMMAND_MV,\n  c_ as PLUGIN_COMMAND_MZ,\n  mE as RECOVER_ALL,\n  UE as RESUME_BGM,\n  O_ as RETURN_TO_TITLE_SCREEN,\n  AE as ROTATE_PICTURE,\n  q_ as ROUTE_CHANGE_BLEND_MODE,\n  g_ as ROUTE_CHANGE_FREQ,\n  d_ as ROUTE_CHANGE_IMAGE,\n  j_ as ROUTE_CHANGE_OPACITY,\n  p_ as ROUTE_CHANGE_SPEED,\n  h_ as ROUTE_DIR_FIX_OFF,\n  f_ as ROUTE_DIR_FIX_ON,\n  R_ as ROUTE_END,\n  F_ as ROUTE_JUMP,\n  G_ as ROUTE_MOVE_AWAY,\n  P_ as ROUTE_MOVE_BACKWARD,\n  n_ as ROUTE_MOVE_DOWN,\n  H_ as ROUTE_MOVE_FORWARD,\n  o_ as ROUTE_MOVE_LEFT,\n  C_ as ROUTE_MOVE_LOWER_L,\n  S_ as ROUTE_MOVE_LOWER_R,\n  M_ as ROUTE_MOVE_RANDOM,\n  A_ as ROUTE_MOVE_RIGHT,\n  U_ as ROUTE_MOVE_TOWARD,\n  N_ as ROUTE_MOVE_UP,\n  I_ as ROUTE_MOVE_UPPER_L,\n  L_ as ROUTE_MOVE_UPPER_R,\n  w_ as ROUTE_PLAY_SE,\n  z_ as ROUTE_SCRIPT,\n  J_ as ROUTE_STEP_ANIME_OFF,\n  x_ as ROUTE_STEP_ANIME_ON,\n  m_ as ROUTE_SWITCH_OFF,\n  r_ as ROUTE_SWITCH_ON,\n  y_ as ROUTE_THROUGH_OFF,\n  u_ as ROUTE_THROUGH_ON,\n  Z_ as ROUTE_TRANSPARENT_OFF,\n  Q_ as ROUTE_TRANSPARENT_ON,\n  K_ as ROUTE_TURN_180D,\n  a_ as ROUTE_TURN_90D_L,\n  e_ as ROUTE_TURN_90D_R,\n  l_ as ROUTE_TURN_90D_R_L,\n  i_ as ROUTE_TURN_AWAY,\n  B_ as ROUTE_TURN_DOWN,\n  V_ as ROUTE_TURN_LEFT,\n  X_ as ROUTE_TURN_RANDOM,\n  W_ as ROUTE_TURN_RIGHT,\n  b_ as ROUTE_TURN_TOWARD,\n  Y_ as ROUTE_TURN_UP,\n  D_ as ROUTE_WAIT,\n  v_ as ROUTE_WALK_ANIME_OFF,\n  k_ as ROUTE_WALK_ANIME_ON,\n  ME as SAVE_BGM,\n  s_ as SCRIPT_EVAL,\n  t_ as SCRIPT_EVAL_BODY,\n  Z as SCROLL_MAP,\n  C as SELECT_ITEM,\n  Q as SET_EVENT_LOCATION,\n  d as SET_MOVEMENT_ROUTE,\n  y as SET_VEHICLE_LOCATION,\n  SE as SET_WEATHER_EFFECT,\n  cE as SHAKE_SCREEN,\n  KE as SHOP_PROCESSING,\n  lE as SHOP_PROCESSING_BODY,\n  w as SHOW_ANIMATION,\n  z as SHOW_BALLOON_ICON,\n  jE as SHOW_BATTLE_ANIMATION,\n  o as SHOW_CHOICES,\n  A as SHOW_CHOICES_ITEM,\n  R as SHOW_MESSAGE,\n  n as SHOW_MESSAGE_BODY,\n  nE as SHOW_PICTURE,\n  S as SHOW_SCROLLING_TEXT,\n  I as SHOW_SCROLLING_TEXT_BODY,\n  U as SKIP,\n  DE as STOP_SE,\n  NE as TINT_PICTURE,\n  tE as TINT_SCREEN,\n  u as TRANSFER_PLAYER,\n  RE as WAIT\n};\n//# sourceMappingURL=rpgtypes.es.js.map\n","import * as r from \"@sigureya/rpgtypes\";\nimport { COMMENT as T, COMMENT_BODY as F, SCRIPT_EVAL as S, SCRIPT_EVAL_BODY as Y, SHOW_MESSAGE as f, SHOW_MESSAGE_BODY as U, SHOW_SCROLLING_TEXT as l, SHOW_SCROLLING_TEXT_BODY as _, CHANGE_NICKNAME as z, CHANGE_PROFILE as X, CHANGE_NAME as q, SHOW_CHOICES_ITEM as x, SHOW_CHOICES as K } from \"@sigureya/rpgtypes\";\nconst m = () => [0, 0, 0, 0, 0, 0, 0, 0], ke = (e) => ({\n  id: 0,\n  name: \"\",\n  nickname: \"\",\n  profile: \"\",\n  note: \"\",\n  classId: 0,\n  initialLevel: 1,\n  maxLevel: 99,\n  characterIndex: 0,\n  characterName: \"\",\n  faceIndex: 0,\n  faceName: \"\",\n  battlerName: \"\",\n  traits: [],\n  equips: [],\n  ...e\n}), We = (e) => ({\n  battlerHue: 0,\n  id: 0,\n  name: \"\",\n  note: \"\",\n  battlerName: \"\",\n  traits: [],\n  params: m(),\n  exp: 0,\n  gold: 0,\n  dropItems: [],\n  actions: [],\n  ...e\n}), Fe = (e) => ({\n  price: 0,\n  id: 0,\n  name: \"\",\n  note: \"\",\n  iconIndex: 0,\n  description: \"\",\n  etypeId: 0,\n  params: m(),\n  traits: [],\n  ...e\n}), Ye = (e) => ({\n  price: 0,\n  id: 0,\n  name: \"\",\n  note: \"\",\n  iconIndex: 0,\n  description: \"\",\n  etypeId: 0,\n  wtypeId: 0,\n  params: m(),\n  traits: [],\n  damage: E(),\n  ...e\n}), Ue = (e) => ({\n  id: 0,\n  name: \"\",\n  note: \"\",\n  traits: [],\n  learnings: [],\n  params: m(),\n  expParams: [],\n  ...e\n}), E = (e) => ({\n  type: 0,\n  elementId: 0,\n  formula: \"0\",\n  variance: 20,\n  critical: !1,\n  ...e\n}), ze = (e) => ({\n  id: 0,\n  name: \"\",\n  iconIndex: 0,\n  description: \"\",\n  note: \"\",\n  price: 0,\n  consumable: !1,\n  scope: 0,\n  occasion: 0,\n  speed: 0,\n  successRate: 100,\n  repeats: 1,\n  tpGain: 0,\n  hitType: 0,\n  animationId: 0,\n  damage: E(),\n  effects: [],\n  ...e\n}), Xe = (e) => ({\n  animationId: 0,\n  damage: E(),\n  description: \"\",\n  hitType: 0,\n  iconIndex: 0,\n  id: 0,\n  message1: \"\",\n  message2: \"\",\n  mpCost: 0,\n  name: \"\",\n  note: \"\",\n  occasion: 0,\n  repeats: 1,\n  requiredWtypeId1: 0,\n  requiredWtypeId2: 0,\n  scope: 0,\n  speed: 0,\n  stypeId: 0,\n  successRate: 100,\n  tpCost: 0,\n  tpGain: 0,\n  effects: [],\n  messageType: 0,\n  ...e\n}), qe = (e) => ({\n  id: 0,\n  name: \"\",\n  iconIndex: 0,\n  restriction: 0,\n  priority: 50,\n  motion: 0,\n  overlay: 0,\n  removeAtBattleEnd: !1,\n  removeByRestriction: !1,\n  autoRemovalTiming: 0,\n  minTurns: 1,\n  maxTurns: 1,\n  removeByDamage: !1,\n  chanceByDamage: 100,\n  removeByWalking: !1,\n  stepsToRemove: 100,\n  message1: \"\",\n  message2: \"\",\n  message3: \"\",\n  message4: \"\",\n  traits: [],\n  note: \"\",\n  ...e\n}), xe = (e) => ({\n  autoplayBgm: !0,\n  autoplayBgs: !1,\n  battleback1Name: \"\",\n  battleback2Name: \"\",\n  data: [],\n  disableDashing: !1,\n  displayName: \"\",\n  encounterList: [],\n  events: [],\n  height: 0,\n  note: \"\",\n  width: 0,\n  x: 0,\n  y: 0,\n  parallaxName: \"\",\n  parallaxLoopX: !1,\n  parallaxLoopY: !1,\n  parallaxShow: !1,\n  parallaxSx: 0,\n  parallaxSy: 0,\n  ...e\n}), Ke = (e) => ({\n  id: 0,\n  name: \"\",\n  note: \"\",\n  x: 0,\n  y: 0,\n  pages: [y()],\n  ...e\n}), j = (e) => ({\n  actorId: 0,\n  actorValid: !1,\n  itemId: 0,\n  itemValid: !1,\n  selfSwitchCh: \"\",\n  selfSwitchValid: !1,\n  switch1Id: 0,\n  switch1Valid: !1,\n  switch2Id: 0,\n  switch2Valid: !1,\n  variableId: 0,\n  variableValid: !1,\n  variableValue: 0,\n  ...e\n}), $ = (e) => ({\n  characterIndex: 0,\n  characterName: \"\",\n  direction: 6,\n  pattern: 0,\n  tileId: 0,\n  ...e\n}), y = (e) => ({\n  conditions: j(),\n  image: $(),\n  moveRoute: {\n    list: [],\n    repeat: !1,\n    wait: !1,\n    skippable: !1\n  },\n  directionFix: !1,\n  moveFrequency: 0,\n  list: [],\n  ...e\n}), a = (e = {}) => ({\n  name: e.name ?? \"\",\n  volume: e.volume ?? 90,\n  pitch: e.pitch ?? 100,\n  pan: e.pan ?? 0\n}), je = (e, t, n = 0) => ({\n  code: e,\n  parameters: [a({ name: t })],\n  indent: n\n}), $e = (e = {}) => ({\n  local: e.local ?? \"\",\n  gameTitle: e.gameTitle ?? \"\",\n  currencyUnit: e.currencyUnit ?? \"\",\n  title1Name: e.title1Name ?? \"\",\n  terms: e.terms ?? J(),\n  title2Name: e.title2Name ?? \"\",\n  optAutosave: e.optAutosave ?? !1,\n  attackMotions: e.attackMotions ?? [],\n  startMapId: e.startMapId ?? 0,\n  startX: e.startX ?? 0,\n  startY: e.startY ?? 0,\n  switches: e.switches ?? [],\n  windowTone: e.windowTone ?? [0, 0, 0, 0],\n  editMapId: e.editMapId ?? 0,\n  testTroopId: e.testTroopId ?? 0,\n  testBattlers: e.testBattlers ?? [],\n  versionId: e.versionId ?? 0,\n  advanced: e.advanced ?? te(),\n  armorTypes: e.armorTypes ?? [],\n  elements: e.elements ?? [],\n  variables: e.variables ?? [],\n  equipTypes: e.equipTypes ?? [],\n  sounds: e.sounds ?? ne(),\n  titleBgm: e.titleBgm ?? a(),\n  gameoverMe: e.gameoverMe ?? a(),\n  battleBgm: e.battleBgm ?? a(),\n  defeatMe: e.defeatMe ?? a(),\n  victoryMe: e.victoryMe ?? a(),\n  battleback1Name: e.battleback1Name ?? \"\",\n  battleback2Name: e.battleback2Name ?? \"\",\n  battlerName: e.battlerName ?? \"\",\n  weaponTypes: e.weaponTypes ?? [],\n  skillTypes: e.skillTypes ?? [],\n  optDisplayTp: e.optDisplayTp ?? !1,\n  optDrawTitle: e.optDrawTitle ?? !1,\n  optExtraExp: e.optExtraExp ?? !1,\n  optFloorDeath: e.optFloorDeath ?? !1,\n  optFollowers: e.optFollowers ?? !1,\n  optKeyItemsNumber: e.optKeyItemsNumber ?? !1,\n  optSideView: e.optSideView ?? !1,\n  optSlipDeath: e.optSlipDeath ?? !1,\n  optTransparent: e.optTransparent ?? !1,\n  boat: e.boat ?? d(),\n  ship: e.ship ?? d(),\n  airship: e.airship ?? d(),\n  tileSize: e.tileSize ?? 0\n}), J = (e = {}) => ({\n  messages: ee(e.messages ?? {}),\n  commands: b(e.commands ?? {}),\n  params: Q(e.params ?? {}),\n  basic: Z(e.basic ?? {})\n}), Z = (e = {}) => [\n  e.level ?? \"\",\n  e.levelA ?? \"\",\n  e.hp ?? \"\",\n  e.hpA ?? \"\",\n  e.mp ?? \"\",\n  e.mpA ?? \"\",\n  e.tp ?? \"\",\n  e.tpA ?? \"\",\n  e.experience ?? \"\",\n  e.exp ?? \"\"\n], Q = (e = {}) => [\n  e.mhp ?? \"\",\n  e.mmp ?? \"\",\n  e.atk ?? \"\",\n  e.def ?? \"\",\n  e.mat ?? \"\",\n  e.mdf ?? \"\",\n  e.agi ?? \"\",\n  e.luk ?? \"\",\n  e.hit ?? \"\",\n  e.eva ?? \"\"\n], b = (e = {}) => [\n  e.fight ?? \"\",\n  e.escape ?? \"\",\n  e.attack ?? \"\",\n  e.guard ?? \"\",\n  e.item ?? \"\",\n  e.skill ?? \"\",\n  e.equip ?? \"\",\n  e.status ?? \"\",\n  e.formation ?? \"\",\n  e.save ?? \"\",\n  e.gameEnd ?? \"\",\n  e.options ?? \"\",\n  e.weapon ?? \"\",\n  e.armor ?? \"\",\n  e.keyItem ?? \"\",\n  e.equip2 ?? \"\",\n  e.optimize ?? \"\",\n  e.clear ?? \"\",\n  e.newGame ?? \"\",\n  e.continue_ ?? \"\",\n  e.notUsed20 ?? \"\",\n  e.toTitle ?? \"\",\n  e.cancel ?? \"\",\n  e.notUsed23 ?? \"\",\n  e.buy ?? \"\",\n  e.sell ?? \"\"\n], ee = (e = {}) => ({\n  alwaysDash: e.alwaysDash ?? \"\",\n  commandRemember: e.commandRemember ?? \"\",\n  touchUI: e.touchUI ?? \"\",\n  bgmVolume: e.bgmVolume ?? \"\",\n  bgsVolume: e.bgsVolume ?? \"\",\n  meVolume: e.meVolume ?? \"\",\n  seVolume: e.seVolume ?? \"\",\n  possession: e.possession ?? \"\",\n  expTotal: e.expTotal ?? \"\",\n  expNext: e.expNext ?? \"\",\n  saveMessage: e.saveMessage ?? \"\",\n  loadMessage: e.loadMessage ?? \"\",\n  file: e.file ?? \"\",\n  autosave: e.autosave ?? \"\",\n  partyName: e.partyName ?? \"\",\n  emerge: e.emerge ?? \"\",\n  preemptive: e.preemptive ?? \"\",\n  surprise: e.surprise ?? \"\",\n  escapeStart: e.escapeStart ?? \"\",\n  escapeFailure: e.escapeFailure ?? \"\",\n  victory: e.victory ?? \"\",\n  defeat: e.defeat ?? \"\",\n  obtainExp: e.obtainExp ?? \"\",\n  obtainGold: e.obtainGold ?? \"\",\n  obtainItem: e.obtainItem ?? \"\",\n  levelUp: e.levelUp ?? \"\",\n  obtainSkill: e.obtainSkill ?? \"\",\n  useItem: e.useItem ?? \"\",\n  criticalToEnemy: e.criticalToEnemy ?? \"\",\n  criticalToActor: e.criticalToActor ?? \"\",\n  actorDamage: e.actorDamage ?? \"\",\n  actorRecovery: e.actorRecovery ?? \"\",\n  actorGain: e.actorGain ?? \"\",\n  actorLoss: e.actorLoss ?? \"\",\n  actorDrain: e.actorDrain ?? \"\",\n  actorNoDamage: e.actorNoDamage ?? \"\",\n  actorNoHit: e.actorNoHit ?? \"\",\n  enemyDamage: e.enemyDamage ?? \"\",\n  enemyRecovery: e.enemyRecovery ?? \"\",\n  enemyGain: e.enemyGain ?? \"\",\n  enemyLoss: e.enemyLoss ?? \"\",\n  enemyDrain: e.enemyDrain ?? \"\",\n  enemyNoDamage: e.enemyNoDamage ?? \"\",\n  enemyNoHit: e.enemyNoHit ?? \"\",\n  evasion: e.evasion ?? \"\",\n  magicEvasion: e.magicEvasion ?? \"\",\n  magicReflection: e.magicReflection ?? \"\",\n  counterAttack: e.counterAttack ?? \"\",\n  substitute: e.substitute ?? \"\",\n  buffAdd: e.buffAdd ?? \"\",\n  debuffAdd: e.debuffAdd ?? \"\",\n  buffRemove: e.buffRemove ?? \"\",\n  actionFailure: e.actionFailure ?? \"\"\n}), te = (e = {}) => ({\n  gameId: e.gameId ?? 0,\n  screenWidth: e.screenWidth ?? 0,\n  screenHeight: e.screenHeight ?? 0,\n  uiAreaWidth: e.uiAreaWidth ?? 0,\n  uiAreaHeight: e.uiAreaHeight ?? 0,\n  windowOpacity: e.windowOpacity ?? 0,\n  screenScale: e.screenScale ?? 0,\n  numberFontFilename: e.numberFontFilename ?? \"\",\n  mainFontFilename: e.mainFontFilename ?? \"\",\n  fallbackFonts: e.fallbackFonts ?? \"\",\n  fontSize: e.fontSize ?? 0\n}), d = (e = {}) => ({\n  bgm: e.bgm ?? a(),\n  characterIndex: e.characterIndex ?? 0,\n  characterName: e.characterName ?? \"\",\n  startMapId: e.startMapId ?? 0,\n  startX: e.startX ?? 0,\n  startY: e.startY ?? 0\n}), ne = (e = {}) => [\n  e.cursor ?? a(),\n  e.ok ?? a(),\n  e.cancel ?? a(),\n  e.buzzer ?? a(),\n  e.equip ?? a(),\n  e.save ?? a(),\n  e.load ?? a(),\n  e.battleStart ?? a(),\n  e.escape ?? a(),\n  e.enemyAttack ?? a(),\n  e.enemyDamage ?? a(),\n  e.enemyCollapse ?? a(),\n  e.bossCollapse1 ?? a(),\n  e.bossCollapse2 ?? a(),\n  e.actorDamage ?? a(),\n  e.actorCollapse ?? a(),\n  e.playRecovery ?? a(),\n  e.playMiss ?? a(),\n  e.playEvasion ?? a(),\n  e.playMagicEvasion ?? a(),\n  e.playReflection ?? a(),\n  e.shop ?? a(),\n  e.useItem ?? a(),\n  e.useSkill ?? a()\n], p = (e, t) => t ? e === t.code : !1, se = \"MessageHeader invalid command\", ye = \"Script invalid command\", re = \"Invalid Head\", C = (e) => typeof e[0] == \"string\" && e.length === 1, Je = (e, t) => t ? e === t.code && C(t.parameters) : !1, u = (e, t, n) => {\n  const s = [];\n  for (let o = n; o < t.length; o++) {\n    const i = t[o];\n    if (p(e, i) && C(i.parameters))\n      s.push({\n        code: e,\n        indent: i.indent,\n        parameters: [i.parameters[0]]\n      });\n    else\n      break;\n  }\n  return s;\n}, N = (e, t, n) => {\n  const s = e[t];\n  if (s && p(n, s) && C(s.parameters))\n    return {\n      code: n,\n      indent: s.indent,\n      parameters: [s.parameters[0]]\n    };\n  throw new Error(re, { cause: s });\n}, ce = (e, t) => ({\n  head: N(e, t, T),\n  bodys: u(F, e, t + 1)\n}), ae = (e, t) => ({\n  head: N(e, t, S),\n  bodys: u(Y, e, t + 1)\n}), oe = (e, t) => {\n  const n = e[t];\n  if (n && ie(n))\n    return n;\n  throw new Error(se, { cause: n });\n}, ie = (e) => !e || e.code !== f || ![4, 5].includes(e.parameters.length) ? !1 : typeof e.parameters[0] == \"string\" && typeof e.parameters[1] == \"number\" && typeof e.parameters[2] == \"number\" && typeof e.parameters[3] == \"number\", me = (e, t) => ({\n  head: oe(e, t),\n  bodys: u(U, e, t + 1)\n}), ue = \"ScrollTextHeader invalid command\", he = (e, t) => {\n  const n = e[t];\n  if (p(l, n))\n    return n;\n  const s = {\n    headCode: l,\n    bodyCode: _,\n    index: t\n  };\n  throw new Error(ue, { cause: s });\n}, de = (e, t) => ({\n  head: he(e, t),\n  bodys: u(_, e, t + 1)\n}), le = (e, t = `\n`) => e.map((n) => n.parameters[0]).join(t);\nclass I {\n  constructor(t, n) {\n    this.header = t, this.bodies = n;\n  }\n  getBodyText(t = `\n`) {\n    return le(this.getExpandedBodies(), t);\n  }\n  jopinHedderAndBody() {\n    return [this.header, ...this.bodies];\n  }\n  joinCommandBodies() {\n    return this.getExpandedBodies();\n  }\n}\nclass g extends I {\n  constructor(t, n, s) {\n    super(n, s), this.bodyCode = t;\n  }\n  getExpandedBodies() {\n    return this.bodies;\n  }\n  normalizedCommands() {\n    const t = {\n      ...this.header,\n      code: this.header.code,\n      indent: this.header.indent,\n      parameters: [...this.header.parameters]\n    };\n    return this.bodies.length === 0 ? [t] : [t, this.mergedBody()];\n  }\n  mergedBody() {\n    return {\n      code: this.bodyCode,\n      indent: this.header.indent,\n      parameters: [this.getBodyText()]\n    };\n  }\n}\nclass M extends I {\n  getExpandedBodies() {\n    return [this.header, ...this.bodies];\n  }\n  mergedBody() {\n    return {\n      code: this.header.code,\n      indent: this.header.indent,\n      parameters: [this.getBodyText()]\n    };\n  }\n  normalizedCommands() {\n    return [this.mergedBody()];\n  }\n}\nconst Ee = \"選択肢ヘルプ\", pe = (e) => e.parameters[0] === Ee, Ce = (e, t = []) => new g(401, e, t), ge = (e, t = []) => new g(405, e, t), Ae = (e, t = []) => pe(e) ? new g(\n  408,\n  e,\n  t\n) : new M(\n  e,\n  t\n), Te = (e, t = []) => new M(e, t), v = (e, t, n) => {\n  const s = me(e, t), o = Ce(s.head, s.bodys);\n  return n(o);\n}, O = (e, t, n) => {\n  const s = de(e, t), o = ge(s.head, s.bodys);\n  return n(o);\n}, H = (e, t, n) => {\n  const s = ce(e, t), o = Ae(s.head, s.bodys);\n  return n(o);\n}, R = (e, t, n) => {\n  const s = ae(e, t), o = Te(s.head, s.bodys);\n  return n(o);\n}, Se = (e, t, n) => {\n  const s = e[t];\n  switch (s.code) {\n    case f:\n      return v(e, t, n.showMessage);\n    case l:\n      return O(e, t, n.showScrollingText);\n    case T:\n      return H(e, t, n.comment);\n    case S:\n      return R(e, t, n.script);\n    case K:\n      return n.showChoices(s, t, e);\n    case x:\n      return n.choiceWhen(s, t, e);\n    case q:\n      return n.changeName(s, t, e);\n    case X:\n      return n.changeProfile(s, t, e);\n    case z:\n      return n.changeNickname(s, t, e);\n    default:\n      return n.other(s, t, e);\n  }\n}, Ze = (e, t) => e.map(\n  (n, s, o) => Se(o, s, t)\n), c = (e, t, n, s, o) => s ? s(e, t, n) : o(e, t, n), fe = (e, t) => e.map((n, s) => _e(e, s, t)), _e = (e, t, n) => {\n  const s = e[t];\n  switch (s.code) {\n    // メッセージ関連\n    case r.SHOW_MESSAGE:\n      return n.showMessage ? v(e, t, n.showMessage) : n.other(s, t, e);\n    case r.SHOW_MESSAGE_BODY:\n      return c(s, t, e, n.showMessageBody, n.other);\n    case r.SHOW_SCROLLING_TEXT:\n      return n.showScrollingText ? O(e, t, n.showScrollingText) : n.other(s, t, e);\n    case r.SHOW_SCROLLING_TEXT_BODY:\n      return c(s, t, e, n.showScrollingTextBody, n.other);\n    case r.SHOW_CHOICES:\n      return c(s, t, e, n.showChoices, n.other);\n    case r.SHOW_CHOICES_ITEM:\n      return c(s, t, e, n.choiceWhen, n.other);\n    // コメント・スクリプト関連\n    case r.COMMENT:\n      return n.comment ? H(e, t, n.comment) : n.other(s, t, e);\n    case r.COMMENT_BODY:\n      return c(s, t, e, n.commentBody, n.other);\n    case r.SCRIPT_EVAL:\n      return n.script ? R(e, t, n.script) : n.other(s, t, e);\n    case r.SCRIPT_EVAL_BODY:\n      return c(s, t, e, n.scriptBody, n.other);\n    // 条件・制御系\n    case r.CONDITIONAL_BRANCH:\n      return c(s, t, e, n.conditionalBranch, n.other);\n    case r.CONTROL_SWITCHES:\n      return c(s, t, e, n.controlSwitch, n.other);\n    case r.CONTROL_VARIABLES:\n      return c(s, t, e, n.controlVariable, n.other);\n    case r.CONTROL_SELF_SWITCH:\n      return c(s, t, e, n.controlSelfSwitch, n.other);\n    case r.CONTROL_TIMER:\n      return c(s, t, e, n.controlTimer, n.other);\n    case r.COMMON_EVENT:\n      return c(s, t, e, n.commonEvent, n.other);\n    // メニュー\n    case r.CHANGE_SAVE_ACCESS:\n      return c(s, t, e, n.changeSaveAccess, n.other);\n    case r.CHANGE_MENU_ACCESS:\n      return c(s, t, e, n.changeMenuAccess, n.other);\n    case r.CHANGE_ENCOUNTER:\n      return c(s, t, e, n.changeEncounter, n.other);\n    case r.CHANGE_FORMATION_ACCESS:\n      return c(s, t, e, n.changeFormationAccess, n.other);\n    // キャラクター情報変更\n    case r.CHANGE_NAME:\n      return c(s, t, e, n.changeName, n.other);\n    case r.CHANGE_PROFILE:\n      return c(s, t, e, n.changeProfile, n.other);\n    case r.CHANGE_NICKNAME:\n      return c(s, t, e, n.changeNickname, n.other);\n    case r.CHANGE_ACTOR_IMAGES:\n      return c(s, t, e, n.changeActorImages, n.other);\n    case r.CHANGE_VEHICLE_IMAGE:\n      return c(s, t, e, n.changeVehicleImage, n.other);\n    // BGM・音楽関連\n    case r.CHANGE_BATTLE_BGM:\n      return c(s, t, e, n.changeBattleBGM, n.other);\n    case r.CHANGE_VICTORY_ME:\n      return c(s, t, e, n.changeVictoryME, n.other);\n    case r.CHANGE_DEFEAT_ME:\n      return c(s, t, e, n.changeDefeatME, n.other);\n    case r.PLAY_BGM:\n      return c(s, t, e, n.playBGM, n.other);\n    case r.FADEOUT_BGM:\n      return c(s, t, e, n.fadeOutBGM, n.other);\n    case r.PLAY_SE:\n      return c(s, t, e, n.playSE, n.other);\n    case r.STOP_SE:\n      return c(s, t, e, n.stopSE, n.other);\n    case r.PLAY_ME:\n      return c(s, t, e, n.playME, n.other);\n    // ラベル・ジャンプ\n    case r.LABEL:\n      return c(s, t, e, n.label, n.other);\n    case r.LABEL_JUMP:\n      return c(s, t, e, n.labelJump, n.other);\n    // 画面演出\n    case r.CHANGE_WINDOW_COLOR:\n      return c(s, t, e, n.changeWindowColor, n.other);\n    case r.TINT_SCREEN:\n      return c(s, t, e, n.tintScreen, n.other);\n    case r.FLASH_SCREEN:\n      return c(s, t, e, n.flashScreen, n.other);\n    case r.SHAKE_SCREEN:\n      return c(s, t, e, n.shakeScreen, n.other);\n    // ピクチャー\n    case r.SHOW_PICTURE:\n      return c(s, t, e, n.showPicture, n.other);\n    case r.MOVE_PICTURE:\n      return c(s, t, e, n.movePicture, n.other);\n    case r.ROTATE_PICTURE:\n      return c(s, t, e, n.rotatePicture, n.other);\n    case r.TINT_PICTURE:\n      return c(s, t, e, n.tintPicture, n.other);\n    case r.ERASE_PICTURE:\n      return c(s, t, e, n.erasePicture, n.other);\n    // ゲーム進行\n    case r.BATTLE_PROCESSING:\n      return c(s, t, e, n.battleProcessing, n.other);\n    case r.WAIT:\n      return c(s, t, e, n.wait, n.other);\n    case r.GAME_OVER:\n      return c(s, t, e, n.gameover, n.other);\n    // 未整理\n    case r.CHANGE_PARALLAX:\n      return c(s, t, e, n.changeParallax, n.other);\n    case r.CHANGE_BATTLE_BACKGROUND:\n      return c(s, t, e, n.changeBattleBackground, n.other);\n    case r.PLAY_MOVIE:\n      return c(s, t, e, n.playMovie, n.other);\n    case r.CHANGE_TRANSPARENCY:\n      return c(s, t, e, n.changeTransparency, n.other);\n    case r.SET_WEATHER_EFFECT:\n      return c(s, t, e, n.setWeatherEffects, n.other);\n    case r.CHANGE_GOLD:\n      return c(s, t, e, n.changeGold, n.other);\n    case r.SHOW_ANIMATION:\n      return c(s, t, e, n.showAnimation, n.other);\n    case r.TRANSFER_PLAYER:\n      return c(s, t, e, n.transferPlayer, n.other);\n    case r.SET_VEHICLE_LOCATION:\n      return c(s, t, e, n.setVehicleLocation, n.other);\n    case r.SET_EVENT_LOCATION:\n      return c(s, t, e, n.setEventLocation, n.other);\n    default:\n      return n.other(s, t, e);\n  }\n}, Ne = {\n  // body部分は空の要素で置き換える\n  commentBody: () => [],\n  showMessageBody: () => [],\n  scriptBody: () => [],\n  showScrollingTextBody: () => [],\n  // ヘッダ側を基準に、Header+Bodyで生成\n  showMessage: (e) => e.normalizedCommands(),\n  showScrollingText: (e) => e.normalizedCommands(),\n  comment: (e) => e.normalizedCommands(),\n  script: (e) => e.normalizedCommands(),\n  other: (e) => [e]\n}, A = (e) => fe(e, Ne), Ie = (e) => !!e, Qe = (e, t, n) => ({\n  data: e,\n  eventId: t,\n  pageIndex: n\n}), Me = (e, t, n) => e.list.map((s) => ({\n  data: s,\n  eventId: n.id,\n  pageIndex: t\n})), G = (e, t) => e.pages.map(\n  (n, s) => t(n, s, e)\n), w = (e, t) => e.events.filter(Ie).map((n) => G(n, t)), be = (e, t) => w(e, t).flat(2), et = (e, t) => e.map((n) => G(n, t)), tt = (e, t) => e.map((n) => t(n, 0, n)), nt = (e) => w(\n  e,\n  Me\n).flat(2), B = (e, t) => {\n  const n = t(e.list);\n  return {\n    ...e,\n    list: n\n  };\n}, L = (e, t) => ({\n  ...e,\n  pages: e.pages.map((n) => B(n, t))\n}), ve = (e, t) => ({\n  ...e,\n  events: e.events.map((n) => n ? L(n, t) : null)\n}), Oe = (e, t) => e.map((n) => B(n, t)), He = (e, t) => e.map((n) => L(n, t)), st = (e) => ve(e, (t) => A(t).flat()), rt = (e) => Oe(\n  e,\n  (t) => A(t).flat()\n), ct = (e) => He(e, (t) => A(t).flat()), D = (e, t) => t.includes(e.code), at = (e) => D(e, Re), Re = [\n  r.PLAY_BGM,\n  r.PLAY_BGS,\n  r.PLAY_ME,\n  r.PLAY_SE,\n  r.CHANGE_BATTLE_BGM,\n  r.CHANGE_VICTORY_ME,\n  r.CHANGE_DEFEAT_ME,\n  r.CHANGE_VEHICLE_BGM\n], ot = (e) => D(e, Ge), Ge = [\n  r.SHOW_PICTURE,\n  r.CHANGE_ACTOR_IMAGES,\n  r.CHANGE_VEHICLE_IMAGE,\n  r.CHANGE_PARALLAX,\n  r.CHANGE_BATTLE_BACKGROUND\n], it = (e, t) => ({\n  code: e.code,\n  paramIndex: t,\n  value: e.parameters[t]\n}), mt = (e, t) => ({\n  code: e.code,\n  paramIndex: t,\n  value: e.parameters[t]\n}), ut = (e, t) => ({\n  code: e.code,\n  paramIndex: t,\n  value: e.parameters[t]\n}), P = (e, t) => `<${e}:${t}>`, h = () => /<([^<>:]+):([^>]*)>/g, ht = (e, t) => V(e.note, (n, s) => t(n, s, e)), dt = (e) => V(e, (t, n) => [t, n]), V = (e, t) => {\n  const n = h(), s = [];\n  let o;\n  for (; (o = n.exec(e)) !== null; )\n    s.push(t(o[1], o[2]));\n  return s;\n}, lt = (e, t) => e.replace(h(), (n, s, o) => {\n  const i = t(s, o);\n  return P(s, i);\n}), Et = (e, t) => {\n  const n = h();\n  let s;\n  for (; (s = n.exec(e)) !== null; )\n    if (s[1] === t)\n      return s[2];\n}, pt = (e, t, n) => {\n  const s = h();\n  return e.replace(s, (o, i) => i === t ? P(i, n) : o);\n}, Ct = (e) => `code:${e}`, we = \"N\", Be = \"V\", k = (e, t) => `\\\\${e}[${t}]`, Le = (e) => k(we, e.id), gt = (e) => e.map((t) => ({\n  controlChar: Le(t),\n  text: t.name\n})), At = (e) => e.variables.map((t, n) => ({\n  text: t || \"\",\n  controlChar: k(Be, n)\n})).filter((t) => t.text !== \"\"), De = /* @__PURE__ */ new Set([\n  \"px\",\n  \"py\",\n  \"x\",\n  \"y\",\n  \"v\",\n  \"n\",\n  \"p\",\n  \"g\",\n  \"c\",\n  \"i\",\n  \"fs\"\n]), Tt = (e, t = De) => {\n  const n = /\\\\([A-Za-z]+)\\[(\\d+)]/g, s = [];\n  let o;\n  for (; (o = n.exec(e)) !== null; ) {\n    const i = o[1].toLowerCase(), W = parseInt(o[2], 10);\n    t.has(i) && s.push({ char: o[1], id: W });\n  }\n  return s;\n}, Pe = (e, t, n) => t.map((s) => n(s, e[s], e)), St = (e, t, n) => Pe(e, t, n);\nexport {\n  I as BaseEventCommandGroup,\n  Ee as CHOICE_HELP_TEXT,\n  M as CombinedEventCommandGroup,\n  se as ERROR_COMMAND_MESSAGE,\n  ye as ERROR_COMMAND_SCRIPT,\n  re as ERROR_INVALID_HEAD,\n  ue as ERROR_MESSAGE,\n  g as SimpleEventCommandGroup,\n  c as callHandler,\n  Ct as codeInfoText,\n  p as codeTest,\n  be as collectMapEvents,\n  ke as constructActor,\n  Fe as constructArmor,\n  Ue as constructClass,\n  E as constructDamage,\n  We as constructEnemy,\n  ze as constructItem,\n  m as constructParamArray,\n  Xe as constructSkill,\n  qe as constructState,\n  Ye as constructWeapon,\n  te as createAdvanced,\n  a as createAudio,\n  je as createAudioCommand,\n  Z as createBasicTerms,\n  Me as createCommandContext,\n  b as createCommandsArray,\n  Ae as createCommentGroup,\n  j as createCondtion,\n  k as createControlCharFormat,\n  Qe as createEventContext,\n  y as createEventPage,\n  xe as createMap,\n  Ke as createMapEvent,\n  $ as createMapEventImage,\n  Ce as createMessageGroup,\n  ee as createMessages,\n  P as createNoteEntity,\n  Q as createParamNamesArray,\n  Te as createScriptGroup,\n  ge as createScrlloingTextGroup,\n  $e as createSystemData,\n  ne as createSystemSoundsArray,\n  J as createTerms,\n  d as createVehicle,\n  Le as fromActor,\n  gt as fromActors,\n  At as fromSystem,\n  nt as gatherEventCommandContext,\n  Tt as getControlChars,\n  Et as getNoteValue,\n  H as handleGroupComment,\n  v as handleGroupMessage,\n  R as handleGroupScript,\n  O as handleGroupScrollingText,\n  Se as handlerDispatch,\n  at as isAudioCommand,\n  C as isBodyParams,\n  pe as isChoiceHelp,\n  Je as isHeadCommand,\n  ot as isImageCommand,\n  ie as isMessageHeader,\n  le as joinCommandBodies,\n  h as makeRegex,\n  Ze as mapTextCommand,\n  _e as mappingCommand,\n  fe as mappingCommandList,\n  D as matchesEventCommand,\n  A as normalizedCommands,\n  rt as normalizedCommonEvents,\n  st as normalizedMapData,\n  ct as normalizedTroops,\n  ut as pickCommandParamAudio,\n  mt as pickCommandParamNumber,\n  it as pickCommandParamString,\n  u as pickCommands,\n  ce as pickComments,\n  N as pickHead,\n  oe as pickMessageHeader,\n  me as pickMessageWithHead,\n  Pe as pickPropertys,\n  ae as pickScripts,\n  de as pickScrollText,\n  he as pickScrollTextHeader,\n  St as pickString,\n  tt as processCommonEvents,\n  G as processEventPages,\n  w as processMapEvents,\n  et as processTroopEvents,\n  dt as readNote,\n  V as readNoteEx,\n  ht as readNoteObject,\n  Oe as replaceCommonEvents,\n  B as replaceEventCommands,\n  ve as replaceMapEvents,\n  lt as replaceNote,\n  L as replacePages,\n  He as replaceTroops,\n  pt as setNoteValue\n};\n//# sourceMappingURL=rpg-data-tools.es.js.map\n","import type { AudioResourcePath } from \"./types\";\r\nimport type {\r\n  AudioFileParams,\r\n  ExtractCommandByParam,\r\n} from \"@sigureya/rpgtypes\";\r\nimport * as RpgTypes from \"@sigureya/rpgtypes\";\r\n\r\nexport const isAudioResource = (path: {\r\n  folder: string;\r\n  fileName: string;\r\n}): path is AudioResourcePath => {\r\n  return (\r\n    path.folder === RpgTypes.FOLDER_AUDIO_SE ||\r\n    path.folder === RpgTypes.FOLDER_AUDIO_BGM ||\r\n    path.folder === RpgTypes.FOLDER_AUDIO_BGS ||\r\n    path.folder === RpgTypes.FOLDER_AUDIO_ME\r\n  );\r\n};\r\n\r\nexport const audioPathFromCommands = <\r\n  T extends ExtractCommandByParam<[AudioFileParams]>\r\n>(\r\n  command: T\r\n): AudioResourcePath => {\r\n  return {\r\n    folder: folderName(command) || \"\",\r\n    fileName: command.parameters[0].name,\r\n  };\r\n};\r\nconst folderName = <Command extends ExtractCommandByParam<[AudioFileParams]>>(\r\n  command: Command\r\n) => {\r\n  return FOLDER_NAME_TABLE[command.code];\r\n};\r\n\r\nconst FOLDER_NAME_TABLE = {\r\n  [RpgTypes.PLAY_BGM]: RpgTypes.FOLDER_AUDIO_BGM,\r\n  [RpgTypes.PLAY_BGS]: RpgTypes.FOLDER_AUDIO_BGS,\r\n  [RpgTypes.PLAY_ME]: RpgTypes.FOLDER_AUDIO_ME,\r\n  [RpgTypes.PLAY_SE]: RpgTypes.FOLDER_AUDIO_SE,\r\n  [RpgTypes.CHANGE_BATTLE_BGM]: RpgTypes.FOLDER_AUDIO_BGM,\r\n  [RpgTypes.CHANGE_VICTORY_ME]: RpgTypes.FOLDER_AUDIO_ME,\r\n  [RpgTypes.CHANGE_DEFEAT_ME]: RpgTypes.FOLDER_AUDIO_ME,\r\n  [RpgTypes.CHANGE_VEHICLE_BGM]: RpgTypes.FOLDER_AUDIO_ME,\r\n} as const;\r\n","import {\r\n  collectMapEvents,\r\n  isAudioCommand,\r\n  processCommonEvents,\r\n  processTroopEvents,\r\n} from \"@sigureya/rpg-data-tools\";\r\nimport type {\r\n  Data_CommonEvent,\r\n  Data_Troop,\r\n  EventCommand,\r\n  Map_Audios,\r\n  MapEventContainer,\r\n  MapFileInfo,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { MapAudioList } from \"./types\";\r\nimport type { AudioCommandInfo } from \"./eventCommand\";\r\nimport { audioPathFromCommands } from \"./eventCommand\";\r\n\r\nexport const collectAudioCommands = (\r\n  page: { list: EventCommand[] },\r\n  pageIndex: number,\r\n  event: { id: number }\r\n): AudioCommandInfo[] => {\r\n  return page.list.filter(isAudioCommand).map<AudioCommandInfo>((command) => ({\r\n    code: command.code,\r\n    path: audioPathFromCommands(command),\r\n    pageIndex,\r\n    eventId: event.id,\r\n  }));\r\n};\r\n\r\nexport const extractAudioCFromCommonEvents = (\r\n  events: ReadonlyArray<Data_CommonEvent>\r\n): AudioCommandInfo[] => {\r\n  return processCommonEvents(events, collectAudioCommands).flat(2);\r\n};\r\n\r\nexport const expectAudioFromTroop = (\r\n  troops: ReadonlyArray<Data_Troop>\r\n): AudioCommandInfo[] => {\r\n  return processTroopEvents(troops, collectAudioCommands).flat(2);\r\n};\r\ntype MapType = Map_Audios & MapEventContainer<EventCommand>;\r\nexport const extractAudioFromMap = (map: MapType): MapAudioList => {\r\n  return {\r\n    bgm: map.bgm,\r\n    bgs: map.bgs,\r\n    commands: collectMapEvents(map, collectAudioCommands),\r\n  };\r\n};\r\nexport const extractAudioFromMapFileInfo = <Map extends MapType>(\r\n  map: MapFileInfo<Map>\r\n): MapFileInfo<MapAudioList> => {\r\n  return {\r\n    map: extractAudioFromMap(map.map),\r\n    filename: map.filename,\r\n    editingName: map.editingName,\r\n  };\r\n};\r\n","import type { AudioFileParams, System_AudioFiles } from \"@sigureya/rpgtypes\";\r\nimport type { ExtractedSystemAudio, SystemSoundPath } from \"./types\";\r\n/**\r\n * オーディオファイルのリストをパス情報に変換する\r\n * @param sounds オーディオファイルのリスト\r\n * @returns システムサウンドパスリスト\r\n */\r\nexport const systemAudioFiles = (\r\n  system: System_AudioFiles\r\n): ExtractedSystemAudio => {\r\n  return {\r\n    sounds: extractSoundPaths(system.sounds),\r\n    bgm: extractSoundPaths([system.battleBgm, system.titleBgm]),\r\n    me: extractSoundPaths([\r\n      system.defeatMe,\r\n      system.gameoverMe,\r\n      system.victoryMe,\r\n    ]),\r\n  };\r\n};\r\n\r\nconst extractSoundPaths = (sounds: AudioFileParams[]): SystemSoundPath[] => {\r\n  return sounds.map<SystemSoundPath>((sound, index) => ({\r\n    index,\r\n    path: sound.name,\r\n  }));\r\n};\r\n","import { pickString, readNoteEx } from \"@sigureya/rpg-data-tools\";\r\nimport type * as RpgTypes from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  ExtractedText,\r\n  ExtractedTextItem,\r\n  TextExtractable,\r\n} from \"./types\";\r\n\r\nconst createData = (\r\n  key: string,\r\n  text: string,\r\n  data: { id: number }\r\n): ExtractedTextItem => {\r\n  return { key, text: text, id: data.id };\r\n};\r\n\r\nexport const extractTextData = <\r\n  T extends { note: string } & Record<KeyType, string>,\r\n  KeyType extends string & keyof RpgTypes.PickByType<T, string>\r\n>(\r\n  data: T & { id: number },\r\n  keyList: ReadonlyArray<KeyType>\r\n): ExtractedText => {\r\n  return {\r\n    main: pickString<ExtractedTextItem, T>(data, keyList, (key, value) => {\r\n      return createData(key, value, data);\r\n    }),\r\n    note: extractNoteText(data),\r\n  };\r\n};\r\n\r\nexport const extractNoteText = (data: {\r\n  note: string;\r\n  id: number;\r\n}): ExtractedTextItem[] => {\r\n  return readNoteEx(data.note, (key, value) => createData(key, value, data));\r\n};\r\n\r\nexport const extractTextFromActor = (\r\n  actor: TextExtractable<RpgTypes.Data_Actor>\r\n) => {\r\n  return extractTextData(actor, [\"name\", \"nickname\", \"profile\"]);\r\n};\r\n\r\nexport const extractTextFromEnemy = (\r\n  enemy: TextExtractable<RpgTypes.Data_Enemy>\r\n) => {\r\n  return extractTextData(enemy, [\"name\"]);\r\n};\r\n\r\nexport const extractTextFromClass = (\r\n  item: TextExtractable<RpgTypes.Data_Class>\r\n) => {\r\n  return extractTextData(item, [\"name\"]);\r\n};\r\n\r\nexport const extractTextFromSkill = (\r\n  skill: TextExtractable<RpgTypes.Data_Skill>\r\n) => {\r\n  return extractTextData(skill, [\r\n    \"name\",\r\n    \"description\",\r\n    \"message1\",\r\n    \"message2\",\r\n  ]);\r\n};\r\n\r\nexport const extractTextFromItem = (\r\n  item: TextExtractable<RpgTypes.Data_Item>\r\n) => {\r\n  return extractTextData(item, [\"name\", \"description\"]);\r\n};\r\nexport const extractTextFromWeapon = (\r\n  weapon: TextExtractable<RpgTypes.Data_Weapon>\r\n) => {\r\n  return extractTextData(weapon, [\"name\", \"description\"]);\r\n};\r\n\r\nexport const extractTextFromArmor = (\r\n  armor: TextExtractable<RpgTypes.Data_Armor>\r\n) => {\r\n  return extractTextData(armor, [\"name\", \"description\"]);\r\n};\r\n\r\nexport const extractTextFromState = (\r\n  state: TextExtractable<RpgTypes.Data_State>\r\n) => {\r\n  return extractTextData(state, [\r\n    \"name\",\r\n    \"message1\",\r\n    \"message2\",\r\n    \"message3\",\r\n    \"message4\",\r\n  ]);\r\n};\r\n","import type {\r\n  CommandParameter,\r\n  EventCommandGroup_Script,\r\n  TextCommandMapper,\r\n} from \"@sigureya/rpg-data-tools\";\r\nimport {\r\n  mappingCommandList,\r\n  normalizedCommands,\r\n  pickCommandParamString,\r\n  processEventPages,\r\n} from \"@sigureya/rpg-data-tools\";\r\nimport type { EventCommand } from \"@sigureya/rpgtypes\";\r\nimport { type Command_ShowChoices } from \"@sigureya/rpgtypes\";\r\n\r\ntype CommandParam = CommandParameter<string>;\r\nexport const extractTextFromEventCommands = (\r\n  list: ReadonlyArray<EventCommand>\r\n): CommandParam[][] => {\r\n  // メッセージの表示など結合し、1つのコマンドにまとめる\r\n  const normalized = normalizedCommands(list).flat();\r\n  return mappingCommandList(normalized, extractTextMapper);\r\n};\r\nexport const extractTextFromEventPages = (event: {\r\n  pages: { list: EventCommand[] }[];\r\n}): CommandParam[][][] => {\r\n  return processEventPages(event, (page) =>\r\n    extractTextFromEventCommands(page.list)\r\n  );\r\n};\r\n\r\nexport const extractTextMapper: TextCommandMapper<CommandParam[]> = {\r\n  changeName: (command) => [pickCommandParamString(command, 1)],\r\n  changeNickname: (command) => [pickCommandParamString(command, 1)],\r\n  changeProfile: (command) => [pickCommandParamString(command, 1)],\r\n  showChoices: (command) => commandChoice(command),\r\n  showScrollingText: (groop) => {\r\n    return [pickCommandParamString(groop.mergedBody(), 0)];\r\n  },\r\n  showMessage: (data) => {\r\n    const command = data.normalizedCommands();\r\n    const head = pickCommandParamString(command[0], 4);\r\n    const bodyCommand = command[1];\r\n    if (bodyCommand) {\r\n      return [head, pickCommandParamString(bodyCommand, 0)];\r\n    }\r\n    return [head];\r\n  },\r\n  choiceWhen() {\r\n    return [];\r\n  },\r\n  comment(groop) {\r\n    const command = groop.mergedBody();\r\n    return [pickCommandParamString(command, 0)];\r\n  },\r\n  script: (groop) => readScript(groop),\r\n\r\n  other: () => [],\r\n  commentBody: () => [],\r\n};\r\n\r\nexport const readScript = (\r\n  script: EventCommandGroup_Script\r\n): CommandParam[] => {\r\n  return [];\r\n};\r\n\r\nexport const commandChoice = (command: Command_ShowChoices): CommandParam[] => {\r\n  return command.parameters[0].map<CommandParam>((msg, index) => ({\r\n    code: command.code,\r\n    paramIndex: index,\r\n    value: msg,\r\n  }));\r\n};\r\n","import type { CommandParameter } from \"@sigureya/rpg-data-tools\";\r\nimport type {\r\n  Data_CommonEvent,\r\n  Data_Troop,\r\n  MapEvent,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  ExtractedCommonEventText,\r\n  ExtractedMapEventText,\r\n  ExtractedTroopText,\r\n} from \"./types\";\r\nimport { extractNoteText } from \"./mainData\";\r\nimport {\r\n  extractTextFromEventCommands,\r\n  extractTextFromEventPages,\r\n} from \"./eventCommand\";\r\n\r\nexport const correctMapEventText = (\r\n  event: Pick<MapEvent, \"note\" | \"pages\" | \"id\">\r\n): ExtractedMapEventText => {\r\n  const commands: CommandParameter<string>[][][] =\r\n    extractTextFromEventPages(event);\r\n  return {\r\n    note: extractNoteText(event),\r\n    eventId: event.id,\r\n    commands: commands.flat(2),\r\n  };\r\n};\r\n\r\nexport const extractTextFromTroop = (\r\n  troop: Pick<Data_Troop, \"pages\" | \"id\">\r\n): ExtractedTroopText => {\r\n  const commands: CommandParameter<string>[][][] =\r\n    extractTextFromEventPages(troop);\r\n  return {\r\n    troopId: troop.id,\r\n    commands: commands.flat(2),\r\n  };\r\n};\r\n\r\nexport const extractTextFromCommonEvent = (\r\n  event: Pick<Data_CommonEvent, \"list\" | \"id\">\r\n): ExtractedCommonEventText => {\r\n  return {\r\n    eventId: event.id,\r\n    commands: extractTextFromEventCommands(event.list).flat(2),\r\n  };\r\n};\r\n","import type * as RpgTypes from \"@sigureya/rpgtypes\";\r\nimport type {\r\n  ExtractedActorImage,\r\n  ExtractedEnemyImage,\r\n  ImageExtractableActor,\r\n} from \"./types\";\r\n\r\nexport const extractImageFromEnemy = (\r\n  enemy: Pick<RpgTypes.Data_Enemy, \"id\" | \"battlerName\">\r\n): ExtractedEnemyImage => {\r\n  return {\r\n    key: \"battlerName\",\r\n    image: enemy.battlerName,\r\n    id: enemy.id,\r\n  };\r\n};\r\n\r\nconst extractActorImage = (\r\n  actor: ImageExtractableActor,\r\n  key: Exclude<keyof typeof actor, \"id\">,\r\n  folder: RpgTypes.ImageFolders\r\n): ExtractedActorImage => ({\r\n  folder: folder,\r\n  key,\r\n  image: actor[key],\r\n  id: actor.id,\r\n});\r\n\r\nexport const extractImageFromActor = (\r\n  actor: ImageExtractableActor\r\n): ExtractedActorImage[] => {\r\n  return [\r\n    extractActorImage(actor, \"faceName\", \"faces\"),\r\n    extractActorImage(actor, \"characterName\", \"characters\"),\r\n    extractActorImage(actor, \"battlerName\", \"sv_actors\"),\r\n  ];\r\n};\r\n","import type {\r\n  Data_System,\r\n  Data_Vehicle,\r\n  ImageFolders,\r\n  PickByType,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { ExtractedSystemImage } from \"./types\";\r\ntype Vehicle = Pick<Data_Vehicle, \"characterName\">;\r\ninterface SystemVehicles {\r\n  boat: Vehicle;\r\n  ship: Vehicle;\r\n  airship: Vehicle;\r\n}\r\nconst vehicle = (\r\n  system: SystemVehicles,\r\n  key: keyof SystemVehicles\r\n): ExtractedSystemImage => {\r\n  return {\r\n    folder: \"characters\",\r\n    key,\r\n    image: system[key].characterName,\r\n  };\r\n};\r\nconst systemImage = <Key extends keyof PickByType<Data_System, string>>(\r\n  system: Pick<Data_System, Key>,\r\n  key: keyof typeof system,\r\n  folder: ImageFolders\r\n): ExtractedSystemImage => {\r\n  return {\r\n    folder,\r\n    key,\r\n    image: system[key],\r\n  };\r\n};\r\n\r\nexport const extractImageFromSystem = (\r\n  system: Pick<Data_System, \"title1Name\" | \"title2Name\"> & SystemVehicles\r\n): ExtractedSystemImage[] => {\r\n  return [\r\n    systemImage(system, \"title1Name\", \"titles1\"),\r\n    systemImage(system, \"title2Name\", \"titles2\"),\r\n    vehicle(system, \"boat\"),\r\n    vehicle(system, \"ship\"),\r\n    vehicle(system, \"airship\"),\r\n  ];\r\n};\r\n","import {\r\n  mappingCommandList,\r\n  pickCommandParamString,\r\n  type MappingObject,\r\n} from \"@sigureya/rpg-data-tools\";\r\nimport type { ImageCommand } from \"./types\";\r\nimport type {\r\n  EventCommand,\r\n  ImageFolders,\r\n  IndexOfCommandParameter,\r\n} from \"@sigureya/rpgtypes\";\r\n\r\nexport const extractImagesFromCommandList = (\r\n  commands: ReadonlyArray<EventCommand>\r\n): ImageCommand[][] => {\r\n  return mappingCommandList(commands, mappingTable);\r\n};\r\n\r\nconst imageCommand = <\r\n  Params extends unknown[],\r\n  Index extends IndexOfCommandParameter<\r\n    {\r\n      code: number;\r\n      parameters: Params;\r\n    },\r\n    string\r\n  >\r\n>(\r\n  command: {\r\n    code: number;\r\n    parameters: Params;\r\n  },\r\n  index: Index,\r\n  folderName: ImageFolders\r\n) => {\r\n  return {\r\n    folderName,\r\n    command: pickCommandParamString(command, index),\r\n  };\r\n};\r\nconst mappingTable: Pick<\r\n  MappingObject<ImageCommand[]>,\r\n  | \"changeActorImages\"\r\n  //  | \"setMovementRoute\"\r\n  | \"showPicture\"\r\n  | \"changeBattleBackground\"\r\n  | \"changeParallax\"\r\n  | \"changeVehicleImage\"\r\n  | \"other\"\r\n> = {\r\n  changeActorImages: (command) => {\r\n    return [\r\n      imageCommand(command, 1, \"characters\"),\r\n      imageCommand(command, 3, \"faces\"),\r\n      imageCommand(command, 5, \"sv_actors\"),\r\n    ];\r\n  },\r\n  showPicture: (command): [ImageCommand] => {\r\n    return [imageCommand(command, 1, \"pictures\")];\r\n  },\r\n  changeBattleBackground: (command) => {\r\n    return [\r\n      imageCommand(command, 0, \"battlebacks1\"),\r\n      imageCommand(command, 1, \"battlebacks2\"),\r\n    ];\r\n  },\r\n  changeParallax: (command): [ImageCommand] => {\r\n    return [imageCommand(command, 0, \"parallaxes\")];\r\n  },\r\n  changeVehicleImage: (command): [ImageCommand] => {\r\n    return [imageCommand(command, 1, \"characters\")];\r\n  },\r\n  other: () => [],\r\n};\r\n","import {\r\n  collectMapEvents,\r\n  isImageCommand,\r\n  processCommonEvents,\r\n  processTroopEvents,\r\n} from \"@sigureya/rpg-data-tools\";\r\nimport type {\r\n  Data_CommonEvent,\r\n  Data_NamedItem,\r\n  Data_Troop,\r\n  EventCommand,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { ImageCommand, ImageCommandInfo } from \"./eventCommand/\";\r\nimport { extractImagesFromCommandList } from \"./eventCommand/\";\r\nimport type { ExtractedMapImages, ImageExtractableMap } from \"./types\";\r\n\r\nexport const extractImagesFromTroop = (troops: ReadonlyArray<Data_Troop>) => {\r\n  return processTroopEvents(troops, collectImageCommands).flat(2);\r\n};\r\n\r\nexport const extractImagesFromCommonEvents = (\r\n  events: ReadonlyArray<Data_CommonEvent>\r\n): ImageCommandInfo[] => {\r\n  return processCommonEvents(events, collectImageCommands).flat(2);\r\n};\r\n\r\nexport const extractTextFromMap = (\r\n  map: ImageExtractableMap\r\n): ExtractedMapImages => {\r\n  return {\r\n    commands: collectMapEvents(map, collectImageCommands),\r\n    background1: {\r\n      folderName: \"battlebacks1\",\r\n      fileName: map.battleback1Name,\r\n    },\r\n    background2: {\r\n      folderName: \"battlebacks2\",\r\n      fileName: map.battleback2Name,\r\n    },\r\n    parallax: {\r\n      folderName: \"parallaxes\",\r\n      fileName: map.parallaxName,\r\n    },\r\n  };\r\n};\r\n\r\nexport const collectImageCommands = (\r\n  page: { list: EventCommand[] },\r\n  pageIndex: number,\r\n  event: Data_NamedItem\r\n): ImageCommandInfo[] => {\r\n  const list: ImageCommand[][] = extractImagesFromCommandList(\r\n    page.list.filter(isImageCommand)\r\n  );\r\n  return list.flatMap((xx) => mapImageCommands(xx, pageIndex, event));\r\n};\r\n\r\nconst imageCommandInfo = (\r\n  command: ImageCommand,\r\n  event: Data_NamedItem,\r\n  pageIndex: number\r\n): ImageCommandInfo => ({\r\n  folderName: command.folderName,\r\n  command: command.command,\r\n  eventId: event.id,\r\n  pageIndex: pageIndex,\r\n  eventName: event.name,\r\n});\r\n\r\nconst mapImageCommands = (\r\n  list: ImageCommand[],\r\n  pageIndex: number,\r\n  event: Data_NamedItem\r\n) => {\r\n  return list.map((command) => imageCommandInfo(command, event, pageIndex));\r\n};\r\n","import * as RpgTypes from \"@sigureya/rpgtypes\";\r\nimport type { Table_IndexOfDesignation as Table_IndexOfDesignation } from \"./privateTypes\";\r\n\r\nexport const VARIABLE_DESIGNATION = 1 as const;\r\n\r\nexport const DESIGNATION_INDEX_TABLE: Table_IndexOfDesignation = {\r\n  [RpgTypes.CHANGE_ENEMY_HP]: 2,\r\n  [RpgTypes.CHANGE_ENEMY_MP]: 2,\r\n  [RpgTypes.TRANSFER_PLAYER]: 0,\r\n  [RpgTypes.SET_VEHICLE_LOCATION]: 1,\r\n  [RpgTypes.GET_LOCATION_INFO]: 2,\r\n  [RpgTypes.BATTLE_PROCESSING]: 0,\r\n} as const;\r\n\r\nexport const VARIABLEID_INDEX_TABLE = {\r\n  [RpgTypes.CHANGE_ENEMY_HP]: [4],\r\n  [RpgTypes.CHANGE_ENEMY_MP]: [4],\r\n  [RpgTypes.TRANSFER_PLAYER]: [1, 2, 3],\r\n  [RpgTypes.SET_VEHICLE_LOCATION]: [2, 3, 4],\r\n  [RpgTypes.GET_LOCATION_INFO]: [0],\r\n  [RpgTypes.BATTLE_PROCESSING]: [1],\r\n} as const;\r\n","import type { VariableDesignationCommand, VariableReference } from \"./types\";\r\nimport type { EventCommand } from \"@sigureya/rpgtypes\";\r\n\r\nimport {\r\n  DESIGNATION_INDEX_TABLE,\r\n  VARIABLE_DESIGNATION,\r\n  VARIABLEID_INDEX_TABLE,\r\n} from \"./piravate\";\r\n\r\nexport const extractVariableInfos = (\r\n  commandList: ReadonlyArray<EventCommand>\r\n): VariableReference[] => {\r\n  return commandList\r\n    .filter(isVariableReadCommand)\r\n    .flatMap(extractVariableReference);\r\n};\r\n\r\nexport const extractVariableReference = (\r\n  command: VariableDesignationCommand\r\n): VariableReference[] => {\r\n  const indexList = VARIABLEID_INDEX_TABLE[command.code];\r\n  if (indexList === undefined) {\r\n    throw new Error(`code${command.code} is not supported`);\r\n  }\r\n  return indexList.map<VariableReference>((index) => ({\r\n    eventCode: command.code,\r\n    index: index,\r\n    variableId: command.parameters[index] as number,\r\n  }));\r\n};\r\n\r\nexport const isVariableReadCommand = (\r\n  command: EventCommand\r\n): command is VariableDesignationCommand => {\r\n  const index =\r\n    DESIGNATION_INDEX_TABLE[\r\n      command.code as keyof typeof DESIGNATION_INDEX_TABLE\r\n    ];\r\n  if (index === undefined) {\r\n    return false;\r\n  }\r\n  return command.parameters[index] === VARIABLE_DESIGNATION;\r\n};\r\n","import * as RpgTypes from \"@sigureya/rpgtypes\";\r\nimport type { Command_VariableWrite, ExtractedVariableWrite } from \"./types\";\r\n\r\nexport const isVariableWriteCommand = (command: RpgTypes.EventCommand) => {\r\n  return (\r\n    command.code === RpgTypes.INPUT_NUMBER ||\r\n    command.code === RpgTypes.SELECT_ITEM ||\r\n    command.code === RpgTypes.GET_LOCATION_INFO ||\r\n    command.code === RpgTypes.CONTROL_VARIABLES\r\n  );\r\n};\r\n\r\nexport const extractVariableWritsFromEventCommand = (\r\n  command: Command_VariableWrite\r\n): ExtractedVariableWrite[] => {\r\n  if (command.code === RpgTypes.CONTROL_VARIABLES) {\r\n    return extractVariableWritsFromControlVariable(command);\r\n  }\r\n\r\n  return [\r\n    {\r\n      variableId: command.parameters[0],\r\n      code: command.code,\r\n    },\r\n  ];\r\n};\r\n\r\ninterface Command_ControlVariableLike {\r\n  code: typeof RpgTypes.CONTROL_VARIABLES;\r\n  parameters: {\r\n    0: number;\r\n    1: number;\r\n  };\r\n}\r\n\r\nexport const extractVariableWritsFromControlVariable = (\r\n  command: Command_ControlVariableLike\r\n): ExtractedVariableWrite[] => {\r\n  const start = command.parameters[0];\r\n  const end = command.parameters[1];\r\n  return Array.from({ length: end - start + 1 }, (_, i) => ({\r\n    variableId: i + start,\r\n    code: RpgTypes.CONTROL_VARIABLES,\r\n  }));\r\n};\r\n","import type {\r\n  Data_CommonEvent,\r\n  Data_Troop,\r\n  EventCommand,\r\n  MapEvent_PageCondition,\r\n  MapEventContainer,\r\n  MapEventPage,\r\n} from \"@sigureya/rpgtypes\";\r\nimport type { VariableReference } from \"./eventCommand\";\r\nimport { extractVariableInfos } from \"./eventCommand\";\r\nimport type {\r\n  ExtractedMapEventPage,\r\n  ExtractedPageCondition,\r\n  ExtractedVariableCommands,\r\n} from \"./types\";\r\nimport {\r\n  processCommonEvents,\r\n  processMapEvents,\r\n  processTroopEvents,\r\n} from \"@sigureya/rpg-data-tools\";\r\n\r\nexport const collectVariableReadCommand = <\r\n  Page extends { list: EventCommand[] }\r\n>(\r\n  page: Page,\r\n  pageIndex: number,\r\n  event: { id: number }\r\n): ExtractedVariableCommands => {\r\n  const list: VariableReference[] = extractVariableInfos(page.list);\r\n  return {\r\n    pageIndex,\r\n    eventId: event.id,\r\n    commands: list,\r\n  };\r\n};\r\n\r\ntype EventPageType = Pick<MapEventPage, \"conditions\" | \"list\">;\r\n\r\ntype EventType = {\r\n  id: number;\r\n  pages: EventPageType[];\r\n};\r\n\r\nexport const extractVariableReadingFromMap = (\r\n  map: MapEventContainer<EventCommand, EventType>\r\n): ExtractedMapEventPage[] => {\r\n  return processMapEvents(map, (page, pageIndex, event) => ({\r\n    page: collectVariableReadCommand(page, pageIndex, event),\r\n    conditions: extractPageCondition(page.conditions),\r\n  })).flat(2);\r\n};\r\n\r\nexport const extractPageCondition = (\r\n  condtion: MapEvent_PageCondition\r\n): ExtractedPageCondition => {\r\n  return {\r\n    variableId: condtion.variableId,\r\n    valid: condtion.variableValid,\r\n    value: condtion.variableValue,\r\n  };\r\n};\r\n\r\nexport const extractVariableReadingFromCommonEvent = (\r\n  event: ReadonlyArray<Data_CommonEvent>\r\n): ExtractedVariableCommands[] => {\r\n  return processCommonEvents(event, collectVariableReadCommand);\r\n};\r\n\r\nexport const extractVariableReadingFromTroop = (\r\n  troops: ReadonlyArray<Data_Troop>\r\n) => {\r\n  return processTroopEvents(troops, collectVariableReadCommand);\r\n};\r\n","import type { EventCommand } from \"@sigureya/rpgtypes\";\r\nimport { COMMON_EVENT } from \"@sigureya/rpgtypes\";\r\n\r\nexport const extractCommonEventCalls = (\r\n  list: ReadonlyArray<EventCommand>\r\n): Record<number, number> => {\r\n  return list.reduce<Record<number, number>>((acc, command) => {\r\n    if (command.code === COMMON_EVENT) {\r\n      const id: number = command.parameters[0];\r\n      acc[id] = (acc[id] || 0) + 1;\r\n    }\r\n    return acc;\r\n  }, {});\r\n};\r\n"],"names":["$_","EO","_O","OO","se","re","C","n","s","o","i","N","ce","T","F","ae","S","Y","oe","ie","f","me","U","ue","he","l","_","de","le","I","g","M","Ee","pe","Ce","ge","Ae","Te","v","O","H","R","c","fe","_e","e","r.SHOW_MESSAGE","r.SHOW_MESSAGE_BODY","r.SHOW_SCROLLING_TEXT","r.SHOW_SCROLLING_TEXT_BODY","r.SHOW_CHOICES","r.SHOW_CHOICES_ITEM","r.COMMENT","r.COMMENT_BODY","r.SCRIPT_EVAL","r.SCRIPT_EVAL_BODY","r.CONDITIONAL_BRANCH","r.CONTROL_SWITCHES","r.CONTROL_VARIABLES","r.CONTROL_SELF_SWITCH","r.CONTROL_TIMER","r.COMMON_EVENT","r.CHANGE_SAVE_ACCESS","r.CHANGE_MENU_ACCESS","r.CHANGE_ENCOUNTER","r.CHANGE_FORMATION_ACCESS","r.CHANGE_NAME","r.CHANGE_PROFILE","r.CHANGE_NICKNAME","r.CHANGE_ACTOR_IMAGES","r.CHANGE_VEHICLE_IMAGE","r.CHANGE_BATTLE_BGM","r.CHANGE_VICTORY_ME","r.CHANGE_DEFEAT_ME","r.PLAY_BGM","r.FADEOUT_BGM","r.PLAY_SE","r.STOP_SE","r.PLAY_ME","r.LABEL","r.LABEL_JUMP","r.CHANGE_WINDOW_COLOR","r.TINT_SCREEN","r.FLASH_SCREEN","r.SHAKE_SCREEN","r.SHOW_PICTURE","r.MOVE_PICTURE","r.ROTATE_PICTURE","r.TINT_PICTURE","r.ERASE_PICTURE","r.BATTLE_PROCESSING","r.WAIT","r.GAME_OVER","r.CHANGE_PARALLAX","r.CHANGE_BATTLE_BACKGROUND","r.PLAY_MOVIE","r.CHANGE_TRANSPARENCY","r.SET_WEATHER_EFFECT","r.CHANGE_GOLD","r.SHOW_ANIMATION","r.TRANSFER_PLAYER","r.SET_VEHICLE_LOCATION","r.SET_EVENT_LOCATION","Ne","A","Ie","G","w","be","et","tt","D","at","Re","r.PLAY_BGS","r.CHANGE_VEHICLE_BGM","ot","Ge","it","h","V","Pe","St","isAudioResource","path","RpgTypes.FOLDER_AUDIO_SE","RpgTypes.FOLDER_AUDIO_BGM","RpgTypes.FOLDER_AUDIO_BGS","RpgTypes.FOLDER_AUDIO_ME","audioPathFromCommands","command","folderName","FOLDER_NAME_TABLE","RpgTypes.PLAY_BGM","RpgTypes.PLAY_BGS","RpgTypes.PLAY_ME","RpgTypes.PLAY_SE","RpgTypes.CHANGE_BATTLE_BGM","RpgTypes.CHANGE_VICTORY_ME","RpgTypes.CHANGE_DEFEAT_ME","RpgTypes.CHANGE_VEHICLE_BGM","collectAudioCommands","page","pageIndex","event","isAudioCommand","extractAudioCFromCommonEvents","events","processCommonEvents","expectAudioFromTroop","troops","processTroopEvents","extractAudioFromMap","map","collectMapEvents","extractAudioFromMapFileInfo","systemAudioFiles","system","extractSoundPaths","sounds","sound","index","createData","key","text","data","extractTextData","keyList","pickString","value","extractNoteText","readNoteEx","extractTextFromActor","actor","extractTextFromEnemy","enemy","extractTextFromClass","item","extractTextFromSkill","skill","extractTextFromItem","extractTextFromWeapon","weapon","extractTextFromArmor","armor","extractTextFromState","state","extractTextFromEventCommands","list","normalized","normalizedCommands","mappingCommandList","extractTextMapper","extractTextFromEventPages","processEventPages","pickCommandParamString","commandChoice","groop","head","bodyCommand","readScript","script","msg","correctMapEventText","commands","extractTextFromTroop","troop","extractTextFromCommonEvent","extractImageFromEnemy","extractActorImage","folder","extractImageFromActor","vehicle","systemImage","extractImageFromSystem","extractImagesFromCommandList","mappingTable","imageCommand","extractImagesFromTroop","collectImageCommands","extractImagesFromCommonEvents","extractTextFromMap","isImageCommand","xx","mapImageCommands","imageCommandInfo","VARIABLE_DESIGNATION","DESIGNATION_INDEX_TABLE","RpgTypes.CHANGE_ENEMY_HP","RpgTypes.CHANGE_ENEMY_MP","RpgTypes.TRANSFER_PLAYER","RpgTypes.SET_VEHICLE_LOCATION","RpgTypes.GET_LOCATION_INFO","RpgTypes.BATTLE_PROCESSING","VARIABLEID_INDEX_TABLE","extractVariableInfos","commandList","isVariableReadCommand","extractVariableReference","indexList","isVariableWriteCommand","RpgTypes.INPUT_NUMBER","RpgTypes.SELECT_ITEM","RpgTypes.CONTROL_VARIABLES","extractVariableWritsFromEventCommand","extractVariableWritsFromControlVariable","start","end","collectVariableReadCommand","extractVariableReadingFromMap","processMapEvents","extractPageCondition","condtion","extractVariableReadingFromCommonEvent","extractVariableReadingFromTroop","extractCommonEventCalls","acc","COMMON_EVENT","id"],"mappings":"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","x_google_ignoreList":[0,1]}